/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/status": {
    /** Obtain the overall status of the account tied to the API token in use. */
    get: operations["getStatus"];
  };
  "/network": {
    /** Returns a list of Networks you have access to. */
    get: operations["getNetworkList"];
    /** Create a new network. */
    post: operations["newNetwork"];
  };
  "/network/{networkID}": {
    /**
     * Get network by ID
     * @description Returns a single network
     */
    get: operations["getNetworkByID"];
    /** update network configuration */
    post: operations["updateNetwork"];
    /** delete network */
    delete: operations["deleteNetwork"];
  };
  "/network/{networkID}/member": {
    /** Returns a list of Members on the network. */
    get: operations["getNetworkMemberList"];
  };
  "/network/{networkID}/member/{memberID}": {
    /** Return an individual member on a network */
    get: operations["getNetworkMember"];
    /** Modify a network member */
    post: operations["updateNetworkMember"];
    /** Delete a network member */
    delete: operations["deleteNetworkMember"];
  };
  "/user/{userID}": {
    /** Get user record */
    get: operations["getUserByID"];
    /** Update user record (SMS number or Display Name only) */
    post: operations["updateUserByID"];
    /**
     * Delete user
     * @description Deletes the user and all associated networks.  This is not reversible. Delete at your own risk.
     */
    delete: operations["deleteUserByID"];
  };
  "/user/{userID}/token": {
    /** Add an API token */
    post: operations["addAPIToken"];
  };
  "/user/{userID}/token/{tokenName}": {
    /** Delete API Token */
    delete: operations["deleteAPIToken"];
  };
  "/org": {
    /** Get the current user's organization */
    get: operations["getOrganization"];
  };
  "/org/{orgID}": {
    /** Get organization by ID */
    get: operations["getOrganizationByID"];
  };
  "/org/{orgID}/user": {
    /** Get list of organization members */
    get: operations["getOrganizationMembers"];
  };
  "/org-invitation": {
    /** Get list of organization invitations */
    get: operations["getOrganizationInvitationList"];
    /** Invite a user to your organization by email */
    post: operations["inviteUserByEmail"];
  };
  "/org-invitation/{inviteID}": {
    /** Get organization invitation */
    get: operations["getInvitationByID"];
    /** Accept organization invitation */
    post: operations["acceptInvitation"];
    /** Decline organization invitation */
    delete: operations["declineInvitation"];
  };
  "/randomToken": {
    /**
     * Get a random 32 character token
     * @description Get a random 32 character.  Used by the web UI to generate API keys
     */
    get: operations["getRandomToken"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Network object */
    Network: {
      /** @example 8056c2e21c000001 */
      id?: string | null;
      /**
       * Format: int64
       * @example 12345
       */
      clock?: number | null;
      config?: components["schemas"]["NetworkConfig"];
      /** @example Some descriptive text about my network. */
      description?: string | null;
      /** @example accept; */
      rulesSource?: string | null;
      permissions?: components["schemas"]["PermissionsMap"];
      /** @example 00000000-0000-0000-0000-000000000000 */
      ownerId?: string | null;
      /**
       * @description Note: May be 0 on endpoints returning lists of Networks
       * @example 123
       */
      onlineMemberCount?: number | null;
      /** @example 200 */
      authorizedMemberCount?: number | null;
      /** @example 250 */
      totalMemberCount?: number | null;
      capabilitiesByName?: Record<string, unknown> | null;
      tagsByName?: Record<string, unknown> | null;
    };
    NetworkConfig: {
      /**
       * @description Network ID
       * @example 8056c2e21c000001
       */
      id?: string | null;
      /**
       * Format: int64
       * @description Time the network was created
       * @example 1442292672978
       */
      creationTime?: number | null;
      /** @description Array of network capabilities */
      capabilities?: Record<string, never>[] | null;
      dns?: components["schemas"]["DNS"];
      /**
       * @description Enable broadcast packets on the network
       * @example true
       */
      enableBroadcast?: boolean | null;
      /** @description Range of IP addresses for the auto assign pool */
      ipAssignmentPools?: components["schemas"]["IPRange"][] | null;
      /**
       * Format: int64
       * @description Time the network was last modified
       * @example 1588184318235
       */
      lastModified?: number | null;
      /**
       * @description MTU to set on the client virtual network adapter
       * @example 2800
       */
      mtu?: number | null;
      /**
       * @description Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on your network!
       * @example 32
       */
      multicastLimit?: number | null;
      /** @example My ZeroTier Network */
      name?: string | null;
      /**
       * @description Whether or not the network is private.  If false, members will *NOT* need to be authorized to join.
       * @example true
       */
      private?: boolean | null;
      routes?: components["schemas"]["Route"][] | null;
      rules?: Record<string, never>[] | null;
      ssoConfig?: components["schemas"]["NetworkSSOConfig"];
      tags?: Record<string, never>[] | null;
      v4AssignMode?: components["schemas"]["IPV4AssignMode"];
      v6AssignMode?: components["schemas"]["IPV6AssignMode"];
    };
    NetworkSSOConfig: {
      /**
       * @description SSO enabled/disabled on network
       * @example true
       */
      enabled?: boolean;
      /**
       * @description SSO mode.  One of: `default`, `email`, `group`
       * @example default
       */
      mode?: string;
      /**
       * @description SSO client ID.  Client ID must be already configured in the Org
       * @example some-client-id
       */
      clientId?: string;
      /**
       * @description URL of the OIDC issuer
       * @example https://example.com/oidc
       */
      issuer?: string;
      /**
       * @description Provider type
       * @example keycloak
       */
      provider?: string;
      /** @description Authorization URL endpoint */
      authorizationEndpoint?: string;
      /** @description List of email addresses or group memberships that may SSO auth onto the network */
      allowList?: string[] | null;
    };
    Member: {
      /**
       * @deprecated
       * @description concatenation of network ID and member ID
       * @example 8056c2e21c000001-abcdef0123
       */
      id?: string | null;
      /**
       * Format: int64
       * @example 1612993759070
       */
      clock?: number | null;
      /** @example 8056c2e21c000001 */
      networkId?: string | null;
      /**
       * @description ZeroTier ID of the member
       * @example abcdef01234
       */
      nodeId?: string | null;
      /**
       * @deprecated
       * @example 8056c2e21c
       */
      controllerId?: string | null;
      /**
       * @description Whether or not the member is hidden in the UI
       * @example false
       */
      hidden?: boolean | null;
      /**
       * @description User defined name of the member
       * @example my-cray-supercomputer
       */
      name?: string | null;
      /**
       * @description User defined description of the member
       * @example My super awesome cray that I got ZeroTier to run on
       */
      description?: string | null;
      config?: components["schemas"]["MemberConfig"];
      /**
       * Format: int64
       * @deprecated
       * @description Last seen time of the member (milliseconds since epoch).  Note: This data is considered ephemeral and may be reset to 0 at any time without warning.
       * @example 1612993673254
       */
      lastOnline?: number | null;
      /**
       * Format: int64
       * @description Time the member last checked in with the network controller in milliseconds since epoch. Note: This data is considered ephemeral and may be reset to 0 at any time without warning.
       * @example 1612993673254
       */
      lastSeen?: number | null;
      /**
       * @description IP address the member last spoke to the controller via (milliseconds since epoch).  Note: This data is considered ephemeral and may be reset to 0 at any time without warning.
       * @example 8.8.8.8
       */
      physicalAddress?: string | null;
      /**
       * @description ZeroTier version the member is running
       * @example 1.6.3
       */
      clientVersion?: string | null;
      /**
       * @description ZeroTier protocol version
       * @example 12
       */
      protocolVersion?: number | null;
      /** @description Whether or not the client version is new enough to support the rules engine (1.4.0+) */
      supportsRulesEngine?: boolean | null;
    };
    MemberConfig: {
      /**
       * @description Allow the member to be a bridge on the network
       * @example false
       */
      activeBridge?: boolean | null;
      /**
       * @description Is the member authorized on the network
       * @example true
       */
      authorized?: boolean | null;
      capabilities?: number[] | null;
      /**
       * Format: int64
       * @description Time the member was created or first tried to join the network
       * @example 1599853509872
       */
      creationTime?: number | null;
      /**
       * @description ID of the member node.  This is the 10 digit identifier that identifies a ZeroTier node.
       * @example abcdef01234
       */
      id?: string | null;
      /**
       * @description Public Key of the member's Identity
       * @example abcdef0123:0:abcdef0123abcdef0123abcdef0123abcdef0123abcdef0123abcdef0123abcdef0123
       */
      identity?: string | null;
      /**
       * @description List of assigned IP addresses
       * @example [
       *   "10.0.0.3"
       * ]
       */
      ipAssignments?: string[] | null;
      /**
       * Format: int64
       * @description Time the member was authorized on the network
       * @example 1599853637989
       */
      lastAuthorizedTime?: number | null;
      /**
       * Format: int64
       * @description Time the member was deauthorized on the network
       * @example 0
       */
      lastDeauthorizedTime?: number | null;
      /**
       * @description Exempt this member from the IP auto assignment pool on a Network
       * @example false
       */
      noAutoAssignIps?: boolean | null;
      /**
       * @description Member record revision count
       * @example 123
       */
      revision?: number | null;
      /**
       * @description Allow the member to be authorized without OIDC/SSO
       * @example false
       */
      ssoExempt?: boolean | null;
      /**
       * @description Array of 2 member tuples of tag [ID, tag value]
       * @example [
       *   [
       *     123,
       *     456
       *   ]
       * ]
       */
      tags?: (((number | boolean)[])[]) | null;
      /**
       * @description Major version of the client
       * @example 1
       */
      vMajor?: number | null;
      /**
       * @description Minor version of the client
       * @example 6
       */
      vMinor?: number | null;
      /**
       * @description Revision number of the client
       * @example 3
       */
      vRev?: number | null;
      /**
       * @description Protocol version of the client
       * @example 12
       */
      vProto?: number | null;
    };
    User: {
      /**
       * @description User ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      id?: string;
      /**
       * @description Organization ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      orgId?: string;
      globalPermissions?: components["schemas"]["Permissions"];
      /**
       * @description Display Name
       * @example Joe User
       */
      displayName?: string;
      /**
       * @description User email address
       * @example user@example.com
       */
      email?: string;
      auth?: components["schemas"]["AuthMethods"];
      /**
       * @deprecated
       * @description SMS number
       * @example +1-800-555-1212
       */
      smsNumber?: string;
      /**
       * @description List of API token names.
       * @example [
       *   "my-token-id"
       * ]
       */
      tokens?: readonly string[];
    };
    Organization: {
      /**
       * @description Organization ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      id?: string;
      /**
       * @description User ID of the organization owner
       * @example 00000000-0000-0000-0000-000000000000
       */
      ownerId?: string;
      /**
       * @description Organization owner's email address
       * @example user@example.com
       */
      ownerEmail?: string;
      /** @description List of organization members */
      members?: components["schemas"]["OrganizationMember"][];
      /** @description Organization wide SSO configuration */
      ssoConfig?: components["schemas"]["OrgSsoConfig"];
    };
    OrgSsoConfig: {
      /**
       * @description Enabled flag for SSO
       * @example true
       */
      enabled?: boolean;
      issuers?: components["schemas"]["SsoIssuer"][];
    };
    SsoIssuer: {
      /**
       * @description OIDC Provider (one of: default, authelia, auth0, azure, keycloak, okta, onelogin)
       * @example keycloak
       */
      provider?: string;
      /**
       * @description OIDC Client ID
       * @example oidc-client-id
       */
      clientId?: string;
      /**
       * @description OIDC Issuer URL
       * @example https://example.com/oidc/auth
       */
      issuer?: string;
      /**
       * @description authorization endpoint
       * @example https://example.com/oidc/auth/endpoint
       */
      authorization_endpoint?: string;
    };
    OrganizationMember: {
      /**
       * @description Organization ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      orgId?: string;
      /**
       * @description User ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      userId?: string;
      /**
       * @description Organization member display name
       * @example Joe User
       */
      name?: string | null;
      /** @description Organization member email address */
      email?: string | null;
    };
    OrganizationInvitation: {
      /**
       * @description Organization ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      orgId?: string;
      /**
       * @description Email address of invitee
       * @example joe@user.com
       */
      email?: string;
      /**
       * @description Invitation ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      id?: string;
      /**
       * Format: int64
       * @description Creation time of the invite
       * @example 1613067920454
       */
      creation_time?: number;
      /**
       * @description Invitation status
       * @example pending
       */
      status?: components["schemas"]["InviteStatus"];
      /**
       * Format: int64
       * @description Last updated time of the invitation
       * @example 1613067920454
       */
      update_time?: number;
      /**
       * @description Organization owner email address
       * @example user@example.com
       */
      ownerEmail?: string;
    };
    /**
     * @example {
     *   "00000000-0000-0000-0000-000000000000": {
     *     "a": true,
     *     "d": true,
     *     "m": true,
     *     "r": true
     *   }
     * }
     */
    PermissionsMap: {
      [key: string]: components["schemas"]["Permissions"] | undefined;
    };
    Permissions: {
      /**
       * @description Authorize permission
       * @example true
       */
      a?: boolean;
      /**
       * @description Delete permission
       * @example true
       */
      d?: boolean;
      /**
       * @description Modify network settings permission
       * @example true
       */
      m?: boolean;
      /**
       * @description Read network settings permission
       * @example true
       */
      r?: boolean;
    };
    IPRange: {
      /** @example 10.0.0.1 */
      ipRangeStart?: string;
      /** @example 10.0.0.255 */
      ipRangeEnd?: string;
    };
    DNS: {
      /**
       * @description Search domain to use for DNS records
       * @example some.domain
       */
      domain?: string;
      /**
       * @description IP address of unicast DNS service
       * @example [
       *   "10.0.0.3"
       * ]
       */
      servers?: string[] | null;
    };
    Route: {
      /** @example 10.0.0.0/24 */
      target?: string;
      /** @example null */
      via?: string | null;
    };
    IPV4AssignMode: {
      /** @example true */
      zt?: boolean;
    };
    IPV6AssignMode: {
      /** @example true */
      "6plane"?: boolean | null;
      /** @example false */
      rfc4193?: boolean | null;
      /** @example false */
      zt?: boolean | null;
    };
    AuthMethods: {
      /**
       * @description email address for built-in authentication
       * @example user@example.com
       */
      local?: string | null;
      /**
       * @description Google OIDC ID
       * @example 156162346876134683
       */
      google?: string | null;
      /**
       * @description Generic OIDC ID
       * @example 00000000-0000-0000-0000-000000000000
       */
      oidc?: string | null;
    };
    APIToken: {
      /**
       * @description user specified token name
       * @example my-super-secret-token
       */
      tokenName?: string;
      /**
       * @description API Token.  Minimum 32 characters. This token is encrypted in the database and can not be retrieved once set
       * @example adsf98ashdkjh3689adsfnj3$ADn
       */
      token?: string;
    };
    /** @enum {string} */
    InviteStatus: "pending" | "accepted" | "canceled";
    Status: {
      /** @example central_status */
      id?: string;
      /** @example CentralStatus */
      type?: string;
      /**
       * Format: int64
       * @description Current time on server
       * @example 1613067920454
       */
      clock?: number;
      /** @example 1.6.5 */
      version?: string;
      /** @example 4 */
      apiVersion?: string;
      /**
       * Format: int64
       * @description Uptime on server
       * @example 1613067920454
       */
      uptime?: number;
      user?: components["schemas"]["User"];
      readOnlyMode?: boolean;
      loginMethods?: {
        local?: boolean;
        google?: boolean;
        twitter?: boolean;
        facebook?: boolean;
        github?: boolean;
        saml?: boolean;
        oidc?: boolean;
      };
    };
    RandomToken: {
      /**
       * Format: int64
       * @description Current time on server
       * @example 1613067920454
       */
      clock?: number;
      /**
       * @description hex encoded random bytes of the token
       * @example 16924f3ff478526cffb1b89b1040b33c8dbd3c09e07f39691f615769121c0d76
       */
      hex?: string;
      /**
       * @description Random 32 character token
       * @example wwrb66uUh18Fqc38rd8jMd5RFJzRsCn4
       */
      token?: string;
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: never;
    };
    /** @description Access denied */
    AccessDeniedError: {
      content: never;
    };
    /** @description Item not found */
    NotFound: {
      content: never;
    };
    /** @description Authorization required */
    UnauthorizedError: {
      content: never;
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Obtain the overall status of the account tied to the API token in use. */
  getStatus: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Returns a list of Networks you have access to. */
  getNetworkList: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Network"][];
        };
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new network. */
  newNetwork: {
    /** @description empty JSON object */
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Network creation succeeded */
      200: {
        content: {
          "application/json": components["schemas"]["Network"];
        };
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Get network by ID
   * @description Returns a single network
   */
  getNetworkByID: {
    parameters: {
      path: {
        /** @description ID of the network to return */
        networkID: string;
      };
    };
    responses: {
      /** @description get success */
      200: {
        content: {
          "application/json": components["schemas"]["Network"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** update network configuration */
  updateNetwork: {
    parameters: {
      path: {
        /** @description ID of the network to change */
        networkID: string;
      };
    };
    /** @description Network object JSON */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Network"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["Network"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** delete network */
  deleteNetwork: {
    parameters: {
      path: {
        /** @description ID of the network */
        networkID: string;
      };
    };
    responses: {
      /** @description network deleted */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Returns a list of Members on the network. */
  getNetworkMemberList: {
    parameters: {
      path: {
        /** @description ID of the network to return */
        networkID: string;
      };
    };
    responses: {
      /** @description member list get success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"][];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Return an individual member on a network */
  getNetworkMember: {
    parameters: {
      path: {
        /** @description ID of the network */
        networkID: string;
        /** @description ID of the member */
        memberID: string;
      };
    };
    responses: {
      /** @description member get success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Modify a network member */
  updateNetworkMember: {
    parameters: {
      path: {
        /** @description ID of the network */
        networkID: string;
        /** @description ID of the member */
        memberID: string;
      };
    };
    /** @description Member object JSON */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Member"];
      };
    };
    responses: {
      /** @description member changed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Delete a network member */
  deleteNetworkMember: {
    parameters: {
      path: {
        /** @description ID of the network */
        networkID: string;
        /** @description ID of the member */
        memberID: string;
      };
    };
    responses: {
      /** @description member deleted */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get user record */
  getUserByID: {
    parameters: {
      path: {
        /** @description User ID */
        userID: string;
      };
    };
    responses: {
      /** @description User get success */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Update user record (SMS number or Display Name only) */
  updateUserByID: {
    parameters: {
      path: {
        /** @description User ID */
        userID: string;
      };
    };
    /** @description User object JSON */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description User update success */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Delete user
   * @description Deletes the user and all associated networks.  This is not reversible. Delete at your own risk.
   */
  deleteUserByID: {
    parameters: {
      path: {
        /** @description User ID */
        userID: string;
      };
    };
    responses: {
      /** @description user deleted */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Add an API token */
  addAPIToken: {
    parameters: {
      path: {
        /** @description User ID */
        userID: string;
      };
    };
    /** @description APIToken JSON object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["APIToken"];
      };
    };
    responses: {
      /** @description API Token added */
      200: {
        content: {
          "application/json": components["schemas"]["APIToken"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Delete API Token */
  deleteAPIToken: {
    parameters: {
      path: {
        /** @description User ID */
        userID: string;
        /** @description Token Name */
        tokenName: string;
      };
    };
    responses: {
      /** @description API token deleted */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get the current user's organization */
  getOrganization: {
    responses: {
      /** @description Get my organization */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get organization by ID */
  getOrganizationByID: {
    parameters: {
      path: {
        /** @description Organization ID */
        orgID: string;
      };
    };
    responses: {
      /** @description Organization */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get list of organization members */
  getOrganizationMembers: {
    parameters: {
      path: {
        /** @description Organization ID */
        orgID: string;
      };
    };
    responses: {
      /** @description Get organization members success */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMember"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get list of organization invitations */
  getOrganizationInvitationList: {
    responses: {
      /** @description Get list of invitations */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitation"][];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Invite a user to your organization by email */
  inviteUserByEmail: {
    /** @description Organization Invitation JSON object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInvitation"];
      };
    };
    responses: {
      /** @description User invited to organization */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitation"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get organization invitation */
  getInvitationByID: {
    parameters: {
      path: {
        /** @description Invitation ID */
        inviteID: string;
      };
    };
    responses: {
      /** @description Get organization invitation */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitation"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Accept organization invitation */
  acceptInvitation: {
    parameters: {
      path: {
        /** @description Invitation ID */
        inviteID: string;
      };
    };
    responses: {
      /** @description Organization invitation accepted */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitation"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Decline organization invitation */
  declineInvitation: {
    parameters: {
      path: {
        /** @description Invitation ID */
        inviteID: string;
      };
    };
    responses: {
      /** @description organization invitation declined */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["AccessDeniedError"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Get a random 32 character token
   * @description Get a random 32 character.  Used by the web UI to generate API keys
   */
  getRandomToken: {
    responses: {
      /** @description Random token */
      200: {
        content: {
          "application/json": components["schemas"]["RandomToken"];
        };
      };
    };
  };
}
